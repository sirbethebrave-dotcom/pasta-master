import OpenAI from 'openai';

export const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || undefined,
});

export async function generateRecipe(ingredients: string[], constraints: Record<string, unknown>) {
  console.log('üîë OpenAI API Key available:', !!process.env.OPENAI_API_KEY);
  console.log('üìù Ingredients:', ingredients);
  console.log('üéØ Constraints:', constraints);
  
  if (!process.env.OPENAI_API_KEY) {
    console.log('‚ö†Ô∏è No OpenAI API key found, using mock data');
    // Generate smart mock data based on ingredients
    const pasta = (constraints.pasta as string) || '–ø–∞—Å—Ç–∞';
    const hasTomatoes = ingredients.some(i => i.toLowerCase().includes('–ø–æ–º–∏–¥–æ—Ä'));
    const hasCream = ingredients.some(i => i.toLowerCase().includes('—Å–ª–∏–≤–∫'));
    const hasSeafood = ingredients.some(i => ['–∫—Ä–µ–≤–µ—Ç–∫–∏', '–ª–æ—Å–æ—Å—å', '–∞–Ω—á–æ—É—Å—ã'].some(s => i.toLowerCase().includes(s)));
    const hasMushrooms = ingredients.some(i => i.toLowerCase().includes('–≥—Ä–∏–±'));
    const hasBacon = ingredients.some(i => i.toLowerCase().includes('–±–µ–∫–æ–Ω'));
    const hasCheese = ingredients.some(i => i.toLowerCase().includes('—Å—ã—Ä'));
    const hasGarlic = ingredients.some(i => i.toLowerCase().includes('—á–µ—Å–Ω–æ–∫'));
    const hasOnion = ingredients.some(i => i.toLowerCase().includes('–ª—É–∫'));
    const hasBasil = ingredients.some(i => i.toLowerCase().includes('–±–∞–∑–∏–ª–∏–∫'));

    // Generate title based on ingredients
    let title = `${pasta}`;
    if (hasTomatoes && hasBasil) title = `${pasta} —Å —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –±–∞–∑–∏–ª–∏–∫–æ–º`;
    else if (hasCream) title = `${pasta} –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ`;
    else if (hasSeafood) title = `${pasta} —Å –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏`;
    else if (hasMushrooms) title = `${pasta} —Å –≥—Ä–∏–±–∞–º–∏`;
    else if (hasBacon) title = `${pasta} —Å –±–µ–∫–æ–Ω–æ–º`;
    else if (hasTomatoes) title = `${pasta} —Å —Ç–æ–º–∞—Ç–∞–º–∏`;

    // Generate description
    let description = '–í–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤';
    if (hasSeafood) description = '–ò–∑—ã—Å–∫–∞–Ω–Ω–∞—è –ø–∞—Å—Ç–∞ —Å –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏';
    else if (hasCream) description = '–ù–µ–∂–Ω–∞—è –ø–∞—Å—Ç–∞ –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ';
    else if (hasTomatoes) description = '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∞—Å—Ç–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏';

    // Generate steps based on ingredients
    const getSteps = () => {
      const baseStep = { text: `–û—Ç–≤–∞—Ä–∏—Ç–µ ${pasta.toLowerCase()} –¥–æ al dente`, timeMin: 10 };
      
      if (hasTomatoes && hasGarlic && hasOnion) {
        return [
          baseStep,
          { text: '–ù–∞—Ä–µ–∂—å—Ç–µ –ø–æ–º–∏–¥–æ—Ä—ã –∫—É–±–∏–∫–∞–º–∏, –º–µ–ª–∫–æ –ø–æ—Ä—É–±–∏—Ç–µ —á–µ—Å–Ω–æ–∫ –∏ –ª—É–∫', timeMin: 5 },
          { text: '–û–±–∂–∞—Ä—å—Ç–µ –ª—É–∫ –∏ —á–µ—Å–Ω–æ–∫ –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞', timeMin: 3 },
          { text: '–î–æ–±–∞–≤—å—Ç–µ –ø–æ–º–∏–¥–æ—Ä—ã –∏ —Ç—É—à–∏—Ç–µ 5-7 –º–∏–Ω—É—Ç', timeMin: 7 },
          { text: `–°–º–µ—à–∞–π—Ç–µ —Å–æ—É—Å —Å ${pasta.toLowerCase()}`, timeMin: 2 },
          ...(hasCheese ? [{ text: '–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ç–µ—Ä—Ç—ã–º —Å—ã—Ä–æ–º', timeMin: 1 }] : [])
        ];
      } else if (hasCream && hasGarlic) {
        return [
          baseStep,
          { text: '–ú–µ–ª–∫–æ –ø–æ—Ä—É–±–∏—Ç–µ —á–µ—Å–Ω–æ–∫', timeMin: 2 },
          { text: '–û–±–∂–∞—Ä—å—Ç–µ —á–µ—Å–Ω–æ–∫ –Ω–∞ —Å–ª–∏–≤–æ—á–Ω–æ–º –º–∞—Å–ª–µ 1-2 –º–∏–Ω—É—Ç—ã', timeMin: 2 },
          { text: '–î–æ–±–∞–≤—å—Ç–µ —Å–ª–∏–≤–∫–∏ –∏ –¥–æ–≤–µ–¥–∏—Ç–µ –¥–æ –∫–∏–ø–µ–Ω–∏—è', timeMin: 3 },
          { text: `–°–º–µ—à–∞–π—Ç–µ —Å–æ—É—Å —Å ${pasta.toLowerCase()}`, timeMin: 2 },
          ...(hasCheese ? [{ text: '–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ç–µ—Ä—Ç—ã–º —Å—ã—Ä–æ–º', timeMin: 1 }] : [])
        ];
      } else if (hasSeafood) {
        return [
          baseStep,
          { text: '–û—á–∏—Å—Ç–∏—Ç–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', timeMin: 5 },
          { text: '–û–±–∂–∞—Ä—å—Ç–µ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ 3-4 –º–∏–Ω—É—Ç—ã', timeMin: 4 },
          { text: '–î–æ–±–∞–≤—å—Ç–µ —á–µ—Å–Ω–æ–∫ –∏ –±–µ–ª–æ–µ –≤–∏–Ω–æ, —Ç—É—à–∏—Ç–µ 2 –º–∏–Ω—É—Ç—ã', timeMin: 2 },
          { text: `–°–º–µ—à–∞–π—Ç–µ —Å ${pasta.toLowerCase()}`, timeMin: 2 },
          ...(hasCheese ? [{ text: '–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ç–µ—Ä—Ç—ã–º —Å—ã—Ä–æ–º', timeMin: 1 }] : [])
        ];
      } else if (hasMushrooms) {
        return [
          baseStep,
          { text: '–ù–∞—Ä–µ–∂—å—Ç–µ –≥—Ä–∏–±—ã –ª–æ–º—Ç–∏–∫–∞–º–∏', timeMin: 3 },
          { text: '–û–±–∂–∞—Ä—å—Ç–µ –≥—Ä–∏–±—ã –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞', timeMin: 5 },
          { text: '–î–æ–±–∞–≤—å—Ç–µ —á–µ—Å–Ω–æ–∫ –∏ –∑–µ–ª–µ–Ω—å', timeMin: 1 },
          { text: `–°–º–µ—à–∞–π—Ç–µ —Å ${pasta.toLowerCase()}`, timeMin: 2 },
          ...(hasCheese ? [{ text: '–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ç–µ—Ä—Ç—ã–º —Å—ã—Ä–æ–º', timeMin: 1 }] : [])
        ];
      } else {
        return [
          baseStep,
          { text: '–†–∞–∑–æ–≥—Ä–µ–π—Ç–µ –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ', timeMin: 1 },
          { text: '–û–±–∂–∞—Ä—å—Ç–µ —á–µ—Å–Ω–æ–∫ 1-2 –º–∏–Ω—É—Ç—ã', timeMin: 2 },
          { text: `–°–º–µ—à–∞–π—Ç–µ —Å ${pasta.toLowerCase()}`, timeMin: 2 },
          ...(hasCheese ? [{ text: '–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ç–µ—Ä—Ç—ã–º —Å—ã—Ä–æ–º', timeMin: 1 }] : [])
        ];
      }
    };

    const steps = getSteps();

    const timeTotal = steps.reduce((total, step) => total + step.timeMin, 0);

    return {
      title,
      description,
      ingredients: ingredients.length ? ingredients : ['–ø–∞—Å—Ç–∞', '–æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', '—á–µ—Å–Ω–æ–∫', '—Å—ã—Ä'],
      steps,
      nutrition: { cal: 520, protein: 18, fat: 20, carb: 65 },
      timeTotal,
      difficulty: timeTotal > 20 ? '—Å—Ä–µ–¥–Ω–µ' : '–ª–µ–≥–∫–æ',
      tags: hasSeafood ? '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã,–∏–∑—ã—Å–∫–∞–Ω–Ω–æ–µ' : hasCream ? '—Å–ª–∏–≤–æ—á–Ω–æ–µ,–Ω–µ–∂–Ω–æ–µ' : '–±—ã—Å—Ç—Ä–æ,–¥–æ–º–∞—à–Ω–µ–µ',
    };
  }

  const prompt = `–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏. –°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –ø–∞—Å—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: ${ingredients.join(', ')}
–¢–∏–ø –ø–∞—Å—Ç—ã: ${constraints.pasta || '–ª—é–±–æ–π'}
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è: ${constraints.query || '–Ω–µ—Ç'}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ: —Å–æ–ª—å, –ø–µ—Ä–µ—Ü, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ)
- –°–æ–∑–¥–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —Å –ø–æ—à–∞–≥–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
- –£–∫–∞–∂–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
- –°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –≤–∫—É—Å–Ω—ã–º
- –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç—Ä–∞–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{
  "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞",
  "description": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "ingredients": ["–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2", "–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 3"],
  "steps": [{"text": "–ø–æ–¥—Ä–æ–±–Ω—ã–π —à–∞–≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", "timeMin": 5}],
  "nutrition": {"cal": 520, "protein": 18, "fat": 20, "carb": 65},
  "timeTotal": 20,
  "difficulty": "–ª–µ–≥–∫–æ",
  "tags": "—Ç–µ–≥1,—Ç–µ–≥2,—Ç–µ–≥3"
}`;

  try {
    console.log('ü§ñ Calling OpenAI API...');
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7,
      max_tokens: 1000,
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) throw new Error('No response from OpenAI');
    
    console.log('‚úÖ OpenAI response received:', content.substring(0, 100) + '...');

    // Clean the response - remove any markdown formatting
    const cleanContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
    
    const recipe = JSON.parse(cleanContent);
    
    // Validate and fix the recipe structure
    return {
      title: recipe.title || '–ü–∞—Å—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏',
      description: recipe.description || '–í–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –ø–∞—Å—Ç—ã',
      ingredients: Array.isArray(recipe.ingredients) ? recipe.ingredients : ingredients,
      steps: Array.isArray(recipe.steps) ? recipe.steps : [
        { text: '–û—Ç–≤–∞—Ä–∏—Ç–µ –ø–∞—Å—Ç—É –¥–æ al dente', timeMin: 10 },
        { text: '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Å–æ—É—Å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤', timeMin: 5 },
        { text: '–°–º–µ—à–∞–π—Ç–µ –ø–∞—Å—Ç—É —Å —Å–æ—É—Å–æ–º', timeMin: 2 }
      ],
      nutrition: recipe.nutrition || { cal: 520, protein: 18, fat: 20, carb: 65 },
      timeTotal: recipe.timeTotal || 20,
      difficulty: recipe.difficulty || '–ª–µ–≥–∫–æ',
      tags: recipe.tags || '–¥–æ–º–∞—à–Ω–µ–µ,–≤–∫—É—Å–Ω–æ–µ',
    };
  } catch (error) {
    console.error('OpenAI error:', error);
    console.log('Falling back to smart mock data...');
    
    // Use the smart mock data we created earlier
    const pasta = (constraints.pasta as string) || '–ø–∞—Å—Ç–∞';
    const hasTomatoes = ingredients.some(i => i.toLowerCase().includes('–ø–æ–º–∏–¥–æ—Ä'));
    const hasCream = ingredients.some(i => i.toLowerCase().includes('—Å–ª–∏–≤–∫'));
    const hasSeafood = ingredients.some(i => ['–∫—Ä–µ–≤–µ—Ç–∫–∏', '–ª–æ—Å–æ—Å—å', '–∞–Ω—á–æ—É—Å—ã'].some(s => i.toLowerCase().includes(s)));
    const hasMushrooms = ingredients.some(i => i.toLowerCase().includes('–≥—Ä–∏–±'));
    const hasBacon = ingredients.some(i => i.toLowerCase().includes('–±–µ–∫–æ–Ω'));
    const hasCheese = ingredients.some(i => i.toLowerCase().includes('—Å—ã—Ä'));
    const hasGarlic = ingredients.some(i => i.toLowerCase().includes('—á–µ—Å–Ω–æ–∫'));
    const hasOnion = ingredients.some(i => i.toLowerCase().includes('–ª—É–∫'));
    const hasBasil = ingredients.some(i => i.toLowerCase().includes('–±–∞–∑–∏–ª–∏–∫'));

    // Generate title based on ingredients
    let title = `${pasta}`;
    if (hasTomatoes && hasBasil) title = `${pasta} —Å —Ç–æ–º–∞—Ç–∞–º–∏ –∏ –±–∞–∑–∏–ª–∏–∫–æ–º`;
    else if (hasCream) title = `${pasta} –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ`;
    else if (hasSeafood) title = `${pasta} —Å –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏`;
    else if (hasMushrooms) title = `${pasta} —Å –≥—Ä–∏–±–∞–º–∏`;
    else if (hasBacon) title = `${pasta} —Å –±–µ–∫–æ–Ω–æ–º`;
    else if (hasTomatoes) title = `${pasta} —Å —Ç–æ–º–∞—Ç–∞–º–∏`;

    // Generate description
    let description = '–í–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤';
    if (hasSeafood) description = '–ò–∑—ã—Å–∫–∞–Ω–Ω–∞—è –ø–∞—Å—Ç–∞ —Å –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏';
    else if (hasCream) description = '–ù–µ–∂–Ω–∞—è –ø–∞—Å—Ç–∞ –≤ —Å–ª–∏–≤–æ—á–Ω–æ–º —Å–æ—É—Å–µ';
    else if (hasTomatoes) description = '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø–∞—Å—Ç–∞ —Å —Ç–æ–º–∞—Ç–∞–º–∏';

    // Generate steps based on ingredients
    const getSteps = () => {
      const baseStep = { text: `–û—Ç–≤–∞—Ä–∏—Ç–µ ${pasta.toLowerCase()} –¥–æ al dente`, timeMin: 10 };
      
      if (hasTomatoes && hasGarlic && hasOnion) {
        return [
          baseStep,
          { text: '–ù–∞—Ä–µ–∂—å—Ç–µ –ø–æ–º–∏–¥–æ—Ä—ã –∫—É–±–∏–∫–∞–º–∏, –º–µ–ª–∫–æ –ø–æ—Ä—É–±–∏—Ç–µ —á–µ—Å–Ω–æ–∫ –∏ –ª—É–∫', timeMin: 5 },
          { text: '–û–±–∂–∞—Ä—å—Ç–µ –ª—É–∫ –∏ —á–µ—Å–Ω–æ–∫ –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞', timeMin: 3 },
          { text: '–î–æ–±–∞–≤—å—Ç–µ –ø–æ–º–∏–¥–æ—Ä—ã –∏ —Ç—É—à–∏—Ç–µ 5-7 –º–∏–Ω—É—Ç', timeMin: 7 },
          { text: `–°–º–µ—à–∞–π—Ç–µ —Å–æ—É—Å —Å ${pasta.toLowerCase()}`, timeMin: 2 },
          ...(hasCheese ? [{ text: '–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ç–µ—Ä—Ç—ã–º —Å—ã—Ä–æ–º', timeMin: 1 }] : [])
        ];
      } else if (hasCream && hasGarlic) {
        return [
          baseStep,
          { text: '–ú–µ–ª–∫–æ –ø–æ—Ä—É–±–∏—Ç–µ —á–µ—Å–Ω–æ–∫', timeMin: 2 },
          { text: '–û–±–∂–∞—Ä—å—Ç–µ —á–µ—Å–Ω–æ–∫ –Ω–∞ —Å–ª–∏–≤–æ—á–Ω–æ–º –º–∞—Å–ª–µ 1-2 –º–∏–Ω—É—Ç—ã', timeMin: 2 },
          { text: '–î–æ–±–∞–≤—å—Ç–µ —Å–ª–∏–≤–∫–∏ –∏ –¥–æ–≤–µ–¥–∏—Ç–µ –¥–æ –∫–∏–ø–µ–Ω–∏—è', timeMin: 3 },
          { text: `–°–º–µ—à–∞–π—Ç–µ —Å–æ—É—Å —Å ${pasta.toLowerCase()}`, timeMin: 2 },
          ...(hasCheese ? [{ text: '–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ç–µ—Ä—Ç—ã–º —Å—ã—Ä–æ–º', timeMin: 1 }] : [])
        ];
      } else if (hasSeafood) {
        return [
          baseStep,
          { text: '–û—á–∏—Å—Ç–∏—Ç–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã', timeMin: 5 },
          { text: '–û–±–∂–∞—Ä—å—Ç–µ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ 3-4 –º–∏–Ω—É—Ç—ã', timeMin: 4 },
          { text: '–î–æ–±–∞–≤—å—Ç–µ —á–µ—Å–Ω–æ–∫ –∏ –±–µ–ª–æ–µ –≤–∏–Ω–æ, —Ç—É—à–∏—Ç–µ 2 –º–∏–Ω—É—Ç—ã', timeMin: 2 },
          { text: `–°–º–µ—à–∞–π—Ç–µ —Å ${pasta.toLowerCase()}`, timeMin: 2 },
          ...(hasCheese ? [{ text: '–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ç–µ—Ä—Ç—ã–º —Å—ã—Ä–æ–º', timeMin: 1 }] : [])
        ];
      } else if (hasMushrooms) {
        return [
          baseStep,
          { text: '–ù–∞—Ä–µ–∂—å—Ç–µ –≥—Ä–∏–±—ã –ª–æ–º—Ç–∏–∫–∞–º–∏', timeMin: 3 },
          { text: '–û–±–∂–∞—Ä—å—Ç–µ –≥—Ä–∏–±—ã –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞', timeMin: 5 },
          { text: '–î–æ–±–∞–≤—å—Ç–µ —á–µ—Å–Ω–æ–∫ –∏ –∑–µ–ª–µ–Ω—å', timeMin: 1 },
          { text: `–°–º–µ—à–∞–π—Ç–µ —Å ${pasta.toLowerCase()}`, timeMin: 2 },
          ...(hasCheese ? [{ text: '–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ç–µ—Ä—Ç—ã–º —Å—ã—Ä–æ–º', timeMin: 1 }] : [])
        ];
      } else {
        return [
          baseStep,
          { text: '–†–∞–∑–æ–≥—Ä–µ–π—Ç–µ –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ', timeMin: 1 },
          { text: '–û–±–∂–∞—Ä—å—Ç–µ —á–µ—Å–Ω–æ–∫ 1-2 –º–∏–Ω—É—Ç—ã', timeMin: 2 },
          { text: `–°–º–µ—à–∞–π—Ç–µ —Å ${pasta.toLowerCase()}`, timeMin: 2 },
          ...(hasCheese ? [{ text: '–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å —Ç–µ—Ä—Ç—ã–º —Å—ã—Ä–æ–º', timeMin: 1 }] : [])
        ];
      }
    };

    const steps = getSteps();
    const timeTotal = steps.reduce((total, step) => total + step.timeMin, 0);

    return {
      title,
      description,
      ingredients: ingredients.length ? ingredients : ['–ø–∞—Å—Ç–∞', '–æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ', '—á–µ—Å–Ω–æ–∫', '—Å—ã—Ä'],
      steps,
      nutrition: { cal: 520, protein: 18, fat: 20, carb: 65 },
      timeTotal,
      difficulty: timeTotal > 20 ? '—Å—Ä–µ–¥–Ω–µ' : '–ª–µ–≥–∫–æ',
      tags: hasSeafood ? '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã,–∏–∑—ã—Å–∫–∞–Ω–Ω–æ–µ' : hasCream ? '—Å–ª–∏–≤–æ—á–Ω–æ–µ,–Ω–µ–∂–Ω–æ–µ' : '–±—ã—Å—Ç—Ä–æ,–¥–æ–º–∞—à–Ω–µ–µ',
    };
  }
}
